#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long qw(:config no_ignore_case);
use Text::ASCIITable;
use Perun::Agent;
use Perun::Common qw(printMessage tableToPrint getSortingFunction);

sub help {
	return qq{
	Lists Members in VO sponsored by entered Sponsor.
	--------------------------------------
	Available options:
	--sponsor        | -s sponsor's userId
	--vo             | -v VO Id
	--batch          | -b batch
	--help           | -h prints this help
	};
}

my ($sponsorId, $voId, $batch);
GetOptions ("help|h"  => sub {
		print help();
		exit 0;
	}, "batch|b"      => \$batch,
	"voId|v=i"        => \$voId,
	"sponsor|s=i"    => \$sponsorId ) || die help();

# Check options
unless (defined($sponsorId)) { die "ERROR: sponsor is required \n";}
unless (defined $voId) { die "ERROR: voId required.\n"; }

my $agent = Perun::Agent->new();
my $membersAgent = $agent->getMembersAgent;

my @members=$membersAgent->getSponsoredMembers(sponsor => $sponsorId, vo => $voId );
unless (@members) {
	printMessage "No sponsored members found", $batch;
	exit 0;
}

#output
my $sortingFunction = getSortingFunction("getDisplayName", 1);
my $table = Text::ASCIITable->new( { reportErrors => 0, utf8 => 0 } );
$table->setCols( 'ID', 'Name' );

foreach my $member (sort $sortingFunction @members) {
	$table->addRow( $member->getMemberId, $member->getDisplayName );
}

print tableToPrint($table, $batch);

